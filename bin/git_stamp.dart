// ignore_for_file: avoid_print

import 'dart:io';
import 'package:args/args.dart';

import 'src/git_stamp_build.dart';
import 'src/git_stamp_directory.dart';
import 'src/files/dynamic/git_stamp_dynamic_files.dart';
import 'src/files/static/git_stamp_static_files.dart';

void main(List<String> arguments) {
  final parser = ArgParser()
    ..addOption(
      'build-type',
      abbr: 'b',
      allowed: ['lite', 'full', 'custom'],
      defaultsTo: 'lite',
    )
    ..addOption(
      'gen-url-launcher',
      abbr: 'u',
      allowed: ['enabled', 'disabled'],
      defaultsTo: 'disabled',
    )
    ..addMultiOption(
      'gen-only',
      abbr: 'o',
      allowed: [
        'commit-list',
        'diff-list',
        'repo-creation-date',
        'build-branch',
        'build-date-time',
        'build-system-info',
        'repo-path',
        'observed-files-list',
      ],
      defaultsTo: null,
    )
    ..addFlag(
      'help',
      abbr: 'h',
      negatable: false,
    );

  try {
    final results = parser.parse(arguments);
    if (results['help']) {
      print(parser.usage);
      return;
    }

    /// Args
    final buildType = results['build-type'].toLowerCase();
    final urlLauncher = results['gen-url-launcher'].toLowerCase();
    final List<String>? genOnly = results['gen-only'];

    /// Parse
    final isLiteVersion = buildType == 'lite';
    final generateUrlLauncher = urlLauncher == 'enabled';
    final isCustom = genOnly?.isNotEmpty ?? false;

    /// Generated by: https://patorjk.com/
    const gitStampAscii = r'''
    ┏┓•   ┏┓          ┏┓               
    ┃┓┓╋  ┗┓╋┏┓┏┳┓┏┓  ┃┓┏┓┏┓┏┓┏┓┏┓╋┏┓┏┓
    ┗┛┗┗  ┗┛┗┗┻┛┗┗┣┛  ┗┛┗ ┛┗┗ ┛ ┗┻┗┗┛┛ 
                  ┛                    
    ''';

    print('');
    print(gitStampAscii);
    print('Build Type: ${isCustom ? 'custom ($genOnly)' : buildType}');
    print('Use [url_launcher]: ${generateUrlLauncher ? 'true' : 'false'}');
    print('');

    GitStampDirectory.recreateDirectories();

    /// lite & full
    if (isCustom == false) {
      const files = GitStampBuild.all();

      GitStampNode(files).generate();

      _generateDataFiles(files, isLiteVersion);

      if (isCustom == false) {
        _generateFlutterInterface(generateUrlLauncher, isLiteVersion);
      }
    } else {
      /// custom
      final files = GitStampBuild.custom(genOnly ?? []);

      GitStampNode(files).generate();
      _generateDataFiles(files, isLiteVersion);
    }
  } on FormatException catch (e) {
    print(e.message);
    print('Usage: dart run git_stamp [options]');
    print(parser.usage);
    exit(1);
  }
}

void _generateDataFiles(GitStampBuild dataFiles, bool isLiteVersion) {
  if (dataFiles.commitList) {
    GitStampCommit().generate();
    CommitList().generate();
  }

  if (dataFiles.diffList) {
    DiffList(isLiteVersion).generate();
  }

  if (dataFiles.repoCreationDate) {
    RepoCreationDate().generate();
  }

  if (dataFiles.buildBranch) {
    BuildBranch().generate();
  }

  if (dataFiles.buildDateTime) {
    BuildDateTime().generate();
  }

  if (dataFiles.buildSystemInfo) {
    BuildSystemInfo().generate();
  }

  if (dataFiles.repoPath) {
    RepoPath().generate();
  }

  if (dataFiles.observedFilesList) {
    ObservedFilesList().generate();
  }
}

void _generateFlutterInterface(bool useUrlLauncher, bool isLiteVersion) {
  final gitStampUi = [
    IsLiteVersion(isLiteVersion),
    GitStampPage(),
    GitStampDetailsPage(),
    GitStampUtils(),
    GitStampLauncher(useUrlLauncher),
  ];

  for (var element in gitStampUi) {
    element.generate();
  }
}
