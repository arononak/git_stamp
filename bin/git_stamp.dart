import 'dart:io';
import 'dart:core';
import 'package:args/args.dart';

import 'git_stamp_logger.dart';
import 'src/git_stamp_build_model.dart';
import 'src/git_stamp_file.dart';
import 'src/files/dynamic/git_stamp_dynamic_files.dart';
import 'src/files/static/git_stamp_static_files.dart';

const gitStampVersion = 'Version 4.10.0';

/// Generated by: https://patorjk.com/
const gitStampAscii = r'''
 ┏┓•   ┏┓          ┏┓               
 ┃┓┓╋  ┗┓╋┏┓┏┳┓┏┓  ┃┓┏┓┏┓┏┓┏┓┏┓╋┏┓┏┓
 ┗┛┗┗  ┗┛┗┗┻┛┗┗┣┛  ┗┛┗ ┛┗┗ ┛ ┗┻┗┗┛┛ 
               ┛                    
''';

Future<void> main(List<String> arguments) async {
  final parser = ArgParser()
    ..addOption(
      'build-type',
      abbr: 'b',
      allowed: [
        'lite',
        'full',
        'icon',
        'custom',
      ],
      defaultsTo: 'lite',
    )
    ..addMultiOption(
      'gen-only',
      abbr: 'o',
      allowed: [
        'commit-list',
        'diff-list',
        'diff-stat-list',
        'repo-creation-date',
        'build-branch',
        'build-date-time',
        'build-system-info',
        'build-machine',
        'repo-path',
        'observed-files-list',
        'app-version',
        'app-build',
        'app-name',
        'git-config',
        'git-remote',
        'git-config-list',
      ],
      defaultsTo: null,
    )
    ..addFlag(
      'version',
      abbr: 'v',
      negatable: false,
    )
    ..addFlag(
      'help',
      abbr: 'h',
      negatable: false,
    );

  try {
    final results = parser.parse(arguments);
    final usage = parser.usage.split('\n').map((e) => '    $e').join('\n');

    if (results['help']) {
      GitStampLogger.lightGrey(usage);
      return;
    } else if (results['version']) {
      GitStampLogger.lightGrey(gitStampVersion);
      return;
    }

    final stopwatch = Stopwatch()..start();

    final genOnly = results['gen-only'];
    final isCustom = genOnly?.isNotEmpty ?? false;
    final buildType = isCustom ? 'custom' : results['build-type'].toLowerCase();
    final type = 'Build type: ${isCustom ? 'custom ($genOnly)' : buildType}\n';

    GitStampLogger.lightGreen(gitStampVersion);
    GitStampLogger.lightGreen(type);
    gitStampAscii.split('\n').forEach((line) {
      GitStampLogger.lightYellow(line);
    });

    await GitStampDirectory.recreateDirectories();

    switch (buildType) {
      case 'lite':
        _generateDataFiles(GitStampBuildModel.all(), true);
        _generateFlutterInterface(true);
        _generateFlutterIcon();
        _addPackageToPubspec('aron_gradient_line');
        _addPackageToPubspec('url_launcher');
        break;
      case 'full':
        _generateDataFiles(GitStampBuildModel.all(), false);
        _generateFlutterInterface(false);
        _generateFlutterIcon();
        _addPackageToPubspec('aron_gradient_line');
        _addPackageToPubspec('url_launcher');
        break;
      case 'icon':
        _generateDataFiles(GitStampBuildModel.icon(), true);
        _generateFlutterIcon();
        break;
      case 'custom':
        _generateDataFiles(GitStampBuildModel.custom(genOnly ?? []), false);
        break;
      default:
    }

    stopwatch.stop();

    final seconds = stopwatch.elapsed.format();
    GitStampLogger.lightGreen('Generation time: ${seconds}s');

    final gitStampSize = directorySize('./lib/git_stamp');
    final filesCount = directoryFilesCount('./lib/git_stamp');
    GitStampLogger.lightGreen(
      'Size of generated $filesCount files: $gitStampSize',
    );
  } on FormatException catch (e) {
    GitStampLogger.red(e.message);
    GitStampLogger.red('Usage: dart run git_stamp [options]');
    exit(1);
  }
}

void _generateDataFiles(
  GitStampBuildModel files,
  bool isLiteVersion,
) {
  GitStampMain(files.generateFlutterFiles, files.generateFlutterIcon)
      .generate();
  GitStampNode(files).generate();
  GitStampVersion().generate();

  if (files.commitList) {
    GitStampCommit().generate();
    CommitList(count: files.isIcon ? 1 : null).generate();
  }

  if (files.diffList) {
    DiffList(isLiteVersion).generate();
  }

  if (files.diffStatList) {
    DiffStatList(isLiteVersion).generate();
  }

  if (files.repoCreationDate) {
    RepoCreationDate().generate();
  }

  if (files.buildBranch) {
    BuildBranch().generate();
  }

  if (files.buildDateTime) {
    BuildDateTime().generate();
  }

  if (files.buildSystemInfo) {
    BuildSystemInfo().generate();
  }

  if (files.buildMachine) {
    BuildMachine().generate();
    GitStampBuildMachine().generate();
  }

  if (files.repoPath) {
    RepoPath().generate();
  }

  if (files.observedFilesList) {
    ObservedFilesList().generate();
  }

  if (files.appVersion) {
    AppVersion().generate();
  }

  if (files.appBuild) {
    AppBuild().generate();
  }

  if (files.appName) {
    AppName().generate();
  }

  if (files.gitConfig) {
    GitConfig().generate();
  }

  if (files.gitRemote) {
    GitRemote().generate();
  }

  if (files.gitConfigList) {
    GitConfigList().generate();
  }
}

void _generateFlutterInterface(bool isLiteVersion) {
  final gitStampUi = [
    IsLiteVersion(isLiteVersion),
    GitStampPage(),
    GitStampDetailsPage(),
    GitStampUtils(),
    GitStampLauncher(),
    GitStampLicensePage(),
    GitStampListTile(),
  ];

  for (var element in gitStampUi) {
    element.generate();
  }
}

void _generateFlutterIcon() {
  GitStampIcon().generate();
}

void _addPackageToPubspec(String package) {
  final formatted = package.padRight(18);
  Process.runSync('dart', ['pub', 'add', package]).exitCode == 0
      ? GitStampLogger.lightGrey('Adding package  [$formatted]  Success')
      : GitStampLogger.red('Adding package  [$formatted]  Failed');
}

extension DurationExtension on Duration {
  String format() {
    if (inHours > 0) {
      return toString();
    }

    if (inMinutes > 10) {
      return inMinutes.toString();
    }

    return (inMilliseconds / 1000).toStringAsFixed(2);
  }
}
