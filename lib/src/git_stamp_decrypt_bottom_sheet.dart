import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'git_stamp_node.dart';
import 'git_stamp_page.dart';
import 'git_stamp_utils.dart';

/// Generated by ChatGPT
Uint8List _hexToUint8List(String hex) {
  return Uint8List.fromList(hex
      .replaceAll(' ', '')
      .replaceAllMapped(RegExp(r'..'),
          (match) => String.fromCharCode(int.parse(match.group(0)!, radix: 16)))
      .codeUnits);
}

class GitStampDecryptForm extends StatefulWidget {
  const GitStampDecryptForm({
    super.key,
    required this.gitStamp,
    this.startKey,
    this.startIv,
    this.onSuccess,
  });

  final GitStampNode gitStamp;
  final String? startKey;
  final String? startIv;
  final VoidCallback? onSuccess;

  @override
  State<GitStampDecryptForm> createState() => _GitStampDecryptFormState();
}

class _GitStampDecryptFormState extends State<GitStampDecryptForm> {
  late final TextEditingController _keyController;
  late final TextEditingController _ivController;

  @override
  void initState() {
    _keyController = TextEditingController(text: widget.startKey);
    _ivController = TextEditingController(text: widget.startIv);

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 16.0, horizontal: 16.0),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Text('Data Decryption', style: textTitle),
          SizedBox(height: 12),
          _buildHexTextField(
            text: 'KEY',
            length: 64,
            controller: _keyController,
          ),
          SizedBox(height: 12),
          _buildHexTextField(
            text: 'IV',
            length: 32,
            controller: _ivController,
          ),
          TextButton(
            onPressed: () {
              final success = widget.gitStamp.decrypt(
                _hexToUint8List(_keyController.text),
                _hexToUint8List(_ivController.text),
              );

              if (!success) {
                showSnackbar(context: context, message: 'Error');
                Navigator.of(context).pop();
                return;
              }

              showSnackbar(context: context, message: 'Success');
              Navigator.of(context).pop();
              widget.onSuccess?.call();
            },
            child: Text('Decrypt'),
          ),
        ],
      ),
    );
  }

  Widget _buildHexTextField({
    String? text,
    int? length,
    TextEditingController? controller,
  }) {
    return TextField(
      controller: controller,
      decoration: InputDecoration(
        border: OutlineInputBorder(),
        label: Text(text ?? ''),
      ),
      keyboardType: TextInputType.text,
      inputFormatters: [
        FilteringTextInputFormatter.allow(
          RegExp(r'[0-9a-fA-F]'),
        ),
      ],
      maxLength: length ?? 32,
      maxLengthEnforcement: MaxLengthEnforcement.enforced,
    );
  }
}
